# Task ID: 9
# Title: Request Router and Handler
# Status: pending
# Dependencies: 4, 5, 6, 8
# Priority: medium
# Description: Implement a router that directs HTTP requests to appropriate handlers based on method and URI.
# Details:
Create a RequestHandler class to route and process requests:

```cpp
class RequestHandler {
private:
    std::map<std::string, ServerConfig> _serverConfigs;
    std::map<std::string, FileHandler*> _fileHandlers;
    ErrorHandler _errorHandler;
    
public:
    RequestHandler(const std::map<std::string, ServerConfig>& configs);
    ~RequestHandler();
    
    HTTPResponse handleRequest(const HTTPRequest& request, const std::string& serverName);
    
private:
    ServerConfig& getMatchingConfig(const std::string& serverName);
    bool isMethodAllowed(const std::string& method);
};
```

Implementation steps:
1. Determine which server configuration applies to the request
2. Validate the HTTP method (GET, POST, DELETE)
3. Check if the request URI is valid
4. Route the request to the appropriate handler based on method and URI
5. Handle special cases like directory listings or index files
6. Generate error responses for invalid requests

Ensure proper separation of concerns between routing and handling.

# Test Strategy:
1. Test routing of requests to correct handlers
2. Verify handling of different HTTP methods
3. Test with invalid methods to ensure proper error responses
4. Validate virtual host routing based on Host header
5. Test directory listing and index file handling

# Subtasks:
## 1. Implement server configuration selection [pending]
### Dependencies: None
### Description: Create a mechanism to select the appropriate server configuration based on the incoming request's host and port.
### Details:
Develop a function that examines the incoming request's host header and port to determine which server configuration should handle the request. This should support virtual hosting where multiple server blocks may exist in the configuration.

## 2. Implement HTTP method validation [pending]
### Dependencies: 9.1
### Description: Create a validation system to check if the incoming request method is supported by the selected server configuration.
### Details:
Develop logic to verify that the HTTP method (GET, POST, etc.) in the incoming request is allowed according to the server configuration. Return appropriate error codes (405 Method Not Allowed) when methods are not supported.

## 3. Implement URI validation and normalization [pending]
### Dependencies: 9.1
### Description: Create a system to validate and normalize the request URI according to HTTP standards and server configuration.
### Details:
Implement URI validation that handles path normalization (removing '../', './', etc.), checks for valid characters, and enforces maximum length restrictions. The system should also decode percent-encoded characters where appropriate.

## 4. Implement request handler dispatch mechanism [pending]
### Dependencies: 9.1, 9.2, 9.3
### Description: Create a system to match validated requests to the appropriate handler based on location blocks and other configuration directives.
### Details:
Develop a dispatcher that selects the correct handler for a request based on the URI path and server configuration. This should support location block matching with various modifiers (exact, prefix, regex, etc.) and handle priority rules correctly.

## 5. Implement special case handling for directories and index files [pending]
### Dependencies: 9.4
### Description: Create specialized handling for directory requests and index file resolution.
### Details:
Implement logic to handle requests for directories, including directory listing (if enabled) and automatic index file selection based on the configured index directive. This should properly handle trailing slashes and redirects as needed.

## 6. Implement error response integration [pending]
### Dependencies: 9.2, 9.3, 9.4, 9.5
### Description: Create a system to generate appropriate error responses when routing fails at any stage.
### Details:
Develop an error handling system that generates appropriate HTTP error responses (400, 403, 404, 405, etc.) when routing fails. This should integrate with custom error pages if configured in the server and provide meaningful error messages.

