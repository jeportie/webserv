# Task ID: 4
# Title: Implement HTTP Request Parser
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a parser for HTTP requests that extracts method, URI, headers, and body content.
# Details:
Implement an HTTPRequest class and parser that:
1. Parses raw HTTP request data from client connections
2. Extracts HTTP method, URI, HTTP version
3. Parses and stores headers in a case-insensitive map
4. Handles request body based on Content-Length or Transfer-Encoding
5. Extracts query parameters from the URI
6. Provides a clean interface for accessing request components

Pseudo-code:
```cpp
class HTTPRequest {
private:
    std::string method;
    std::string uri;
    std::string http_version;
    std::map<std::string, std::string> headers; // Case-insensitive
    std::string body;
    std::map<std::string, std::string> query_params;
    bool parsed;
    
    // Parsing helper methods
    bool parseRequestLine(const std::string& line);
    bool parseHeaders(const std::string& headers_str);
    void parseQueryParams();
    
public:
    HTTPRequest() : parsed(false) {}
    bool parse(const std::string& raw_request);
    bool isComplete() const;
    
    // Getters
    const std::string& getMethod() const;
    const std::string& getURI() const;
    const std::string& getHTTPVersion() const;
    std::string getHeader(const std::string& name) const;
    const std::string& getBody() const;
    std::string getQueryParam(const std::string& name) const;
};

bool HTTPRequest::parse(const std::string& raw_request) {
    // Find the end of headers (double CRLF)
    size_t header_end = raw_request.find("\r\n\r\n");
    if (header_end == std::string::npos) return false;
    
    // Split into lines
    std::vector<std::string> lines;
    // Split raw_request into lines
    
    // Parse request line (first line)
    if (!parseRequestLine(lines[0])) return false;
    
    // Parse headers
    std::string headers_str = raw_request.substr(lines[0].length() + 2, header_end - lines[0].length() - 2);
    if (!parseHeaders(headers_str)) return false;
    
    // Parse body if present
    if (header_end + 4 < raw_request.length()) {
        body = raw_request.substr(header_end + 4);
    }
    
    // Parse query parameters from URI
    parseQueryParams();
    
    parsed = true;
    return true;
}
```

Implement a ClientConnection class that buffers incoming data and uses the HTTPRequest parser to process complete requests.

# Test Strategy:
1. Unit tests for HTTPRequest parser with various request formats
2. Test parsing of different HTTP methods (GET, POST, DELETE)
3. Test header parsing with various header formats
4. Test query parameter extraction
5. Test body parsing with Content-Length
6. Test incomplete requests and request continuation
7. Test with malformed requests to verify error handling

# Subtasks:
## 1. Implement Request Line Parsing [pending]
### Dependencies: None
### Description: Parse the HTTP request line to extract method, URI, and HTTP version
### Details:
Create a function to parse the first line of an HTTP request. Extract the HTTP method (GET, POST, etc.), the request URI, and the HTTP version. Handle malformed request lines by returning appropriate error codes. Consider edge cases like whitespace handling, unsupported HTTP methods, and invalid HTTP versions. Implement validation for maximum URI length to prevent buffer overflow attacks.

## 2. Implement Header Parsing [pending]
### Dependencies: 4.1
### Description: Parse HTTP headers into a structured format with validation
### Details:
Create a function to parse HTTP headers into a key-value map. Handle folded headers according to RFC specifications. Implement case-insensitive header name comparison. Validate header format and reject malformed headers. Set limits on header count and individual header size to prevent DoS attacks. Extract critical headers like Content-Length, Content-Type, and Transfer-Encoding for later processing stages.

## 3. Implement Content-Length Body Handling [pending]
### Dependencies: 4.2
### Description: Parse request bodies with Content-Length header
### Details:
Implement a function to read and parse request bodies when Content-Length header is present. Validate that Content-Length is a valid non-negative integer. Enforce maximum body size limits to prevent memory exhaustion. Handle timeouts for slow uploads. Implement proper buffer management for efficient memory usage. Detect and handle premature connection closures during body reading.

## 4. Implement Chunked Transfer Encoding [pending]
### Dependencies: 4.2
### Description: Support HTTP chunked transfer encoding for request bodies
### Details:
Create a parser for chunked transfer encoding according to HTTP specifications. Parse each chunk's size header and data. Handle chunk extensions (though they can be ignored). Process the final zero-length chunk and optional trailers. Implement timeout handling for slow chunk transfers. Set maximum chunk size and total body size limits. Validate chunk size format and handle malformed chunk headers appropriately.

## 5. Implement Form Data Parsing [pending]
### Dependencies: 4.3, 4.4
### Description: Parse application/x-www-form-urlencoded and multipart/form-data request bodies
### Details:
Create parsers for both URL-encoded and multipart form data. For URL-encoded: decode percent-encoded characters, handle key-value pairs, and support nested parameters. For multipart: parse boundary delimiters, extract part headers including Content-Disposition, handle file uploads with proper temp file management, and implement memory-efficient streaming for large files. Set limits on form field count, field name length, and field value size.

## 6. Implement Query Parameter Extraction [pending]
### Dependencies: 4.1
### Description: Extract and parse query parameters from request URIs
### Details:
Create a function to extract and parse query parameters from the request URI. Handle URL decoding of parameter names and values. Support array parameters (same name with multiple values). Implement nested parameter parsing if using bracket notation. Set limits on query string length, parameter count, and individual parameter size. Properly handle malformed query strings and return appropriate errors.

## 7. Implement Security Validation [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6
### Description: Add comprehensive security checks for HTTP requests
### Details:
Implement security validations across all parsing stages. Detect and reject oversized requests before they consume resources. Validate protocol compliance strictly. Implement protection against HTTP request smuggling attacks by validating Content-Length and Transfer-Encoding headers. Add detection for NULL byte injection in headers and URI. Implement rate limiting for parsing complex requests. Create sanitization for header values to prevent header injection. Add logging for suspicious requests that might indicate attack attempts.

