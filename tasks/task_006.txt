# Task ID: 6
# Title: Static File Handler
# Status: done
# Dependencies: 5
# Priority: medium
# Description: Implement a handler for serving static files from the filesystem, mapping URIs to file paths and generating appropriate responses.
# Details:
Create a FileHandler class to serve static files:

```cpp
class FileHandler {
private:
    std::string _rootDir;
    std::map<std::string, std::string> _mimeTypes;
    
public:
    FileHandler(const std::string& rootDir);
    ~FileHandler();
    
    HTTPResponse handleGET(const std::string& uri);
    HTTPResponse handlePOST(const std::string& uri, const std::string& body);
    HTTPResponse handleDELETE(const std::string& uri);
    
private:
    std::string getMimeType(const std::string& filename);
    bool fileExists(const std::string& path);
    std::string readFile(const std::string& path);
    bool writeFile(const std::string& path, const std::string& content);
    bool deleteFile(const std::string& path);
};
```

Implementation steps:
1. Map URI to filesystem path using the configured root directory
2. Implement security checks to prevent directory traversal attacks
3. Determine MIME type based on file extension
4. Read file contents for GET requests
5. Write file contents for POST requests
6. Delete files for DELETE requests
7. Generate appropriate HTTP responses based on operation results

Use non-blocking I/O for file operations where possible.

# Test Strategy:
1. Test serving various file types (HTML, CSS, images, etc.)
2. Verify correct MIME type detection
3. Test directory traversal prevention
4. Test handling of large files
5. Verify POST and DELETE operations work correctly
6. Test with non-existent files to ensure proper 404 responses

# Subtasks:
## 1. Implement URI-to-path mapping [done]
### Dependencies: None
### Description: Create a function that maps URI requests to actual file system paths
### Details:
Develop a mechanism to translate incoming URI requests to corresponding file system paths. Handle path normalization, relative path resolution, and base directory configuration. Ensure the mapping is consistent across different operating systems.

## 2. Implement security checks for file access [done]
### Dependencies: 6.1
### Description: Create validation functions to prevent directory traversal and unauthorized access
### Details:
Develop security checks to prevent path traversal attacks (e.g., '../' in paths), validate file permissions, check for symbolic links, and ensure files are within allowed directories. Implement allowlists/denylists for file extensions if needed.

## 3. Implement MIME type detection [done]
### Dependencies: 6.1
### Description: Create a system to determine the correct MIME type for files
### Details:
Build functionality to detect MIME types based on file extensions and/or content analysis. Include a comprehensive mapping of file extensions to MIME types, with fallback to application/octet-stream for unknown types. Consider using existing libraries if appropriate.

## 4. Implement file reading functionality [done]
### Dependencies: 6.1, 6.2
### Description: Create functions to efficiently read files from the file system
### Details:
Develop file reading capabilities with support for different modes (binary/text), partial reads (ranges), streaming for large files, and proper error handling. Consider caching mechanisms for frequently accessed files.

## 5. Implement file writing functionality [done]
### Dependencies: 6.1, 6.2
### Description: Create functions to safely write files to the file system
### Details:
Implement file writing with atomic operations where possible, proper locking mechanisms, permission handling, and directory creation if needed. Include support for both complete rewrites and appending to existing files.

## 6. Implement file deletion functionality [done]
### Dependencies: 6.1, 6.2
### Description: Create functions to safely delete files from the file system
### Details:
Develop file deletion capabilities with proper permission checks, optional recursive deletion for directories, and safeguards against accidental deletion of critical files. Include logging of deletion operations for audit purposes.

## 7. Implement error response generation [done]
### Dependencies: 6.2, 6.3, 6.4, 6.5, 6.6
### Description: Create a system to generate appropriate HTTP error responses
### Details:
Develop error handling that generates appropriate HTTP status codes and messages for different failure scenarios (404 for not found, 403 for forbidden, 500 for server errors, etc.). Include detailed logging for debugging while ensuring sensitive information isn't exposed to clients.

