# Webserv - 42 School Project

## Objective

Develop a basic HTTP/1.1 server in C++98 that handles multiple client connections concurrently using non-blocking I/O. The server should support serving static files, basic HTTP methods, and simple configuration, adhering strictly to the project's specifications.

---

## Core Features

### 1. HTTP/1.1 Support

* **Methods**: Implement support for `GET`, `POST`, and `DELETE` methods.
* **Request Parsing**: Parse HTTP requests to extract the method, URI, headers, and body.
* **Response Generation**: Generate appropriate HTTP responses with correct status codes and headers.

### 2. Non-blocking I/O with Event Loop

* **I/O Multiplexing**: Utilize `epoll()` or an equivalent mechanism (`select()`, `poll()`, or `kqueue()`) to monitor multiple file descriptors.
* **Single Event Loop**: Implement a single event loop to handle all I/O operations without blocking.
* **Timeout Handling**: Incorporate a simple timer system using timestamps to manage client timeouts.

### 3. Static File Serving

* **File Mapping**: Map requested URIs to files on the server's filesystem.
* **Content Delivery**: Read and send file contents as HTTP responses.
* **Error Handling**: Return appropriate error responses (e.g., 404 Not Found) when files are missing.

### 4. Basic Configuration

* **Configuration File**: Parse a simple configuration file to set server parameters.
* **Configurable Parameters**:

  * Host and port
  * Root directory for serving files
  * Maximum client body size
  * Error pages

### 5. Error Handling

* **Default Error Pages**: Serve default error pages for common HTTP errors.
* **Custom Error Pages**: Allow configuration of custom error pages.

---

## Technical Constraints

* **Language**: C++98
* **Compilation Flags**: `-Wall -Wextra -Werror`
* **Makefile**: Provide a Makefile with the following rules: `all`, `clean`, `fclean`, `re`.
* **External Libraries**: Do not use any external libraries or frameworks.
* **System Calls**: Only use allowed system calls as specified in the project guidelines.
* **Non-blocking Operations**: All I/O operations must be non-blocking and go through the event loop.

---

## Simplified Architecture

### 1. Server Initialization

* Parse the configuration file.
* Initialize server sockets based on configuration.
* Set sockets to non-blocking mode.

### 2. Event Loop

* Use `epoll()` to monitor server and client sockets.
* Accept new connections.
* Read from and write to client sockets as needed.
* Close connections that have timed out or encountered errors.

### 3. Request Handling

* Parse incoming HTTP requests.
* Determine the appropriate response based on the request and server configuration.
* Serve static files or return error responses.

---

## Development Roadmap

### Phase 1: Setup

* Implement configuration file parsing.
* Initialize server sockets.

### Phase 2: Event Loop

* Implement the non-blocking event loop using `poll()`.
* Handle new connections and client I/O.

### Phase 3: HTTP Handling

* Parse HTTP requests.
* Generate and send HTTP responses.

### Phase 4: Static File Serving

* Map URIs to filesystem paths.
* Read and send file contents.

### Phase 5: Error Handling

* Implement default and custom error pages.

### Phase 6: Testing and Validation

* Test server functionality using browsers and tools like `curl` and `telnet`.
* Validate behavior against NGINX for comparison.

---

## Educational Focus

This simplified PRD emphasizes understanding of:

* Network programming and socket management
* Non-blocking I/O and event-driven architecture
* HTTP protocol basics
* Configuration file parsing
* Error handling in server applications

By focusing on these core areas, students can build a solid foundation in server development without the complexity of advanced features.

---

Let me know if you need further details or assistance with specific implementation aspects.

#### Allowed Functions

- Socket operations: socket, accept, listen, send, recv
- Address operations: getaddrinfo, freeaddrinfo, setsockopt, getsockname, getprotobyname
- I/O multiplexing: select, poll, epoll (epoll_create, epoll_ctl, epoll_wait), kqueue (kqueue, kevent)
- File operations: open, close, read, write, access, stat, opendir, readdir, closedir
- Process management: execve, fork, waitpid, kill, signal
- Descriptor management: dup, dup2, pipe, socketpair, fcntl
- Error handling: strerror, gai_strerror, errno

