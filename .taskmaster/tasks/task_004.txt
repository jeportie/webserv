# Task ID: 4
# Title: HTTP Request Parser
# Status: done
# Dependencies: 3
# Priority: high
# Description: Implement an HTTP request parser that extracts method, URI, headers, and body from client requests.
# Details:
Create an HTTPRequest class to parse and store HTTP request data:

```cpp
class HTTPRequest {
private:
    std::string _method;
    std::string _uri;
    std::string _httpVersion;
    std::map<std::string, std::string> _headers;
    std::string _body;
    bool _parsingComplete;
    
public:
    HTTPRequest();
    ~HTTPRequest();
    
    bool parse(const std::string& rawRequest);
    bool isComplete() const;
    
    // Getters
    const std::string& getMethod() const;
    const std::string& getURI() const;
    const std::string& getHTTPVersion() const;
    const std::map<std::string, std::string>& getHeaders() const;
    const std::string& getBody() const;
};
```

Implementation steps:
1. Parse the request line to extract method, URI, and HTTP version
2. Parse headers into a map of key-value pairs
3. Handle chunked transfer encoding if present
4. Extract the request body based on Content-Length or Transfer-Encoding
5. Validate that the request conforms to HTTP/1.1 specification

Ensure the parser can handle partial requests and continue parsing as more data arrives.

# Test Strategy:
1. Test with various HTTP request formats (GET, POST, DELETE)
2. Verify correct parsing of headers with different capitalization
3. Test with chunked transfer encoding
4. Test with malformed requests to ensure robust error handling
5. Verify handling of partial requests that arrive in multiple chunks

# Subtasks:
## 1. Implement Request Line Parsing [done]
### Dependencies: None
### Description: Parse the HTTP request line to extract method, URI, and HTTP version
### Details:
Create a function that takes a string input and extracts the three components of the request line. Handle malformed requests, validate HTTP methods (GET, POST, etc.), and properly decode URIs. Implement error handling for invalid request lines.

## 2. Develop Header Parsing Logic [done]
### Dependencies: 4.1
### Description: Parse HTTP headers into a structured format with validation
### Details:
Implement header parsing that handles multiple headers, folded headers, and validates header format. Create a data structure to store headers efficiently. Handle case-insensitive header names and special headers like Content-Length and Transfer-Encoding.

## 3. Create Body Extraction Mechanism [done]
### Dependencies: 4.2
### Description: Extract and process the HTTP request body based on headers
### Details:
Implement body extraction based on Content-Length or Transfer-Encoding headers. Handle different content types and properly manage memory for large request bodies. Implement validation for body size limits and content type restrictions.

## 4. Implement Chunked Encoding Handler [done]
### Dependencies: 4.3
### Description: Process chunked transfer-encoded HTTP requests
### Details:
Create a specialized handler for chunked encoding that processes each chunk, handles chunk extensions, and properly terminates when the zero-length chunk is received. Implement trailer header processing and chunk size validation.

## 5. Develop Partial Request Management [done]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Handle incomplete HTTP requests and buffer management
### Details:
Implement a state machine to track parsing progress and handle partial data. Create buffer management for storing incomplete requests efficiently. Implement timeout handling for incomplete requests and proper resource cleanup.

## 6. Implement HTTP/1.1 Compliance Validation [done]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5
### Description: Validate requests against HTTP/1.1 specification requirements
### Details:
Create validation checks for HTTP/1.1 compliance including required headers, protocol version compatibility, and proper formatting. Implement appropriate error responses for non-compliant requests. Handle protocol-specific features like keep-alive connections and expect headers.

